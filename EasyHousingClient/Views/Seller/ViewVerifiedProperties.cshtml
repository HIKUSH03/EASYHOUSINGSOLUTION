<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real Estate Search</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* Base styles */
        body {
            background-color: #121212;
            color: #ffffff;
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
        }

        .search-container {
            max-width: 1200px;
            margin: 3rem auto;
            padding: 0 1rem;
        }

        /* Search form styles */
        .search-form {
            background-color: #1e1e1e;
            padding: 2rem;
            border-radius: 10px;
            text-align: center;
            margin-bottom: 2rem;
        }

        .add-property-btn {
            background-color: #2d2d2d;
            color: white;
            padding: 1rem 2rem;
            border: 1px solid #333;
            border-radius: 5px;
            cursor: pointer;
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            transition: background-color 0.3s;
        }

        .add-property-btn:hover {
            background-color: #45a049;
        }

        /* Filter styles */
        .filters {
            display: flex;
            justify-content: flex-end;
            margin: 1rem 0;
            gap: 1rem;
        }

        .filter-button {
            padding: 0.75rem 1.5rem;
            border: 1px solid #333;
            background-color: #2d2d2d;
            color: #ffffff;
            border-radius: 5px;
            cursor: pointer;
            font-family: 'Poppins', sans-serif;
            transition: background-color 0.3s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .filter-button:hover {
            background-color: #383838;
        }

        .filter-button.active {
            background-color: #1e1e1e;
            border-color: #4CAF50;
        }

        /* Property grid styles */
        .property-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 2rem;
        }

        /* Property card styles */
        .property-card {
            background-color: #1e1e1e;
            border-radius: 10px;
            overflow: hidden;
            transition: transform 0.3s;
            display: flex;
            flex-direction: column;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .property-card:hover {
            transform: translateY(-5px);
        }

        .property-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .property-info {
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
            min-height: 200px;
        }

        .property-price {
            font-size: 1.5rem;
            font-weight: 600;
            color: #4CAF50;
            margin-bottom: 0.5rem;
        }

        .property-name {
            font-size: 1.2rem;
            font-weight: 500;
            margin: 0.5rem 0;
            line-height: 1.4;
        }

        .property-location {
            color: #999;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .property-type {
            display: inline-block;
            background-color: #2d2d2d;
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.875rem;
            color: #ccc;
            margin-top: 0.5rem;
            margin-bottom: 1rem;
        }

        .verified-badge {
            background-color: #4CAF50;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            margin-bottom: 0.5rem;
        }
        .button-group {
            display: flex;
            gap: 0.5rem;
            margin-top: auto;
            padding-top: 1rem;
        }
        /* Edit button styles */
        .edit-button, .details-button {
            flex: 1;
            padding: 0.75rem 1rem;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-top: auto;
            text-decoration: none;
        }

        .edit-button:hover {
            background-color: #0056b3;
        }
            .details-button:hover {
                background-color: #0056b3;
            }

            .filters {
                flex-direction: column;
            }

            .filter-button {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
    @model IEnumerable<EHSDataAccessLayer.Entity.Property>

    @{
        ViewBag.Title = "Properties";
    }

    <div class="search-container">
        <div class="search-form">
            <button class="add-property-btn" onclick="location.href='@Url.Action("AddProperty", new { id = Session["SellerId"] })'">
                <i class="fas fa-plus"></i> Add Property
            </button>
        </div>

        <div class="filters">
            <button class="filter-button" onclick="location.href='@Url.Action("ViewVerifiedProperties", new { id = Session["SellerId"] })'">
                <i class="fas fa-check-circle"></i> Verified Properties
            </button>
            <button class="filter-button" onclick="location.href='@Url.Action("UnViewVerifiedProperties", new { id = Session["SellerId"] })'">
                <i class="fas fa-circle"></i> Unverified Properties
            </button>
        </div>

        <div class="property-grid" id="propertyResults">
            @foreach (var property in Model)
            {
                <div class="property-card">
                    <img src="/api/placeholder/300/200" alt="@property.PropertyName" class="property-image">
                    <div class="property-info">
                        @if (property.IsActive)
                        {
                            <div class="verified-badge">
                                <i class="fas fa-check-circle"></i> Verified
                            </div>
                        }
                        <div class="property-price">₹@property.PriceRange.ToString("N0")</div>
                        <h3 class="property-name">@property.PropertyName</h3>
                        <div class="property-location">📍 @property.Address</div>
                        <div class="property-type">@property.PropertyType</div>
                        <div class="button-group">
                            <a href="@Url.Action("EditProperty", "Seller", new { id = property.PropertyId })" class="edit-button">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <a href="@Url.Action("PropertyDetails", "Seller", new { id = property.PropertyId })" class="details-button">
                                <i class="fas fa-info-circle"></i> Details
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    @section Scripts {
        <script>// Add any additional JavaScript functionality here
            function updateFilterButtons() {
                const currentPath = window.location.pathname;
                const buttons = document.querySelectorAll('.filter-button');

                buttons.forEach(button => {
                    button.classList.remove('active');
                    if ((currentPath.includes('ViewVerifiedProperties') && button.textContent.includes('Verified') && !button.textContent.includes('Un')) ||
                        (currentPath.includes('UnViewVerifiedProperties') && button.textContent.includes('Unverified'))) {
                        button.classList.add('active');
                    }
                });
            }

            // Call on page load
            document.addEventListener('DOMContentLoaded', updateFilterButtons);</script>
    }
</html>